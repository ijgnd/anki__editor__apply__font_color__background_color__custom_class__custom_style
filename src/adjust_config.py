import json
import os
from pprint import pprint as pp

from aqt import mw
from aqt.utils import (
    askUser,
    showInfo,
)

from .colors import html4colors, css3colors
from .defaultconfig import defaultconfig
from .vars import addonname, mjfile, uses_classes


updatetext_201908 = (
    f'This is a warning message generated by the add-on {addonname} '
    'This message is only shown once after the update/installation of this '
    'add-on or if you use a different profile for the first time.'
    '\n\nThis add-on got a big update in 2019-08 which brings a new config '
    'dialog. The add-on tries to import the old config. '
    "\n\nIf your version of this add-on is from before 2019-02-19 "
    "your old config will be ignored."
    "\n\nIf your version of this add-on is newer there still might "
    "be some unforseeable problems. This new version won't "
    "change your old-config. Your old config is still in "
    "the file 'meta.json' which is in the folder of this add-on. "
    "\n\nTo view your 'meta.json' go to the add-on manager, select this "
    "add-on and click 'View Files'."
    "\n\nIf you run into a problem you can report this on"
    "\nhttps://github.com/ijgnd/anki__quick_highlight_fontcolor_background/issues"
)


def read_and_update_old_v2_config_from_meta_json(config):
    """update old v2 config that was used before 2019-08-06"""
    mjconfig = ""
    if os.path.exists(mjfile):
        with open(mjfile, "r") as mjf:
            mj = json.load(mjf)
            if "config" in mj:
                mjconfig = mj['config']
    if mjconfig:
        # check for illegal entries and abort
        v2_entries_bool = ["v2_configwarning",
                           "v2_menu_styling",
                           "v2_show_in_contextmenu",
                           "v2_wider_button_in_menu",
                           ]
        v2_entries_str = ["v2_key_styling_menu"]
        v2_entries_list = ["v2"]
        v2_all = v2_entries_bool + v2_entries_str + v2_entries_list
        v2_contents_bool = ["Show_in_menu",
                            "extrabutton_show",
                            "extrabutton_width",
                            ]
        v2_contents_str = ["Category",
                           "Hotkey",
                           "Setting",
                           "Text_in_menu",
                           "Text_in_menu_styling",
                           "extrabutton_text",
                           "extrabutton_tooltip",
                           ]
        v2_contents_all = v2_contents_bool + v2_contents_str
        for k, v in mjconfig.items():
            if k not in v2_all:
                text = ('Error while reading old config of the add-on "editor: apply '
                        'font color, background color custom class, custom style". '
                        '\n\n Unknown value "%s" detected in config. Ignoring old config.'
                        % str(k)
                        )
                showInfo(text)
                return
            error = False
            if k in v2_entries_bool and not isinstance(v, bool):
                error = True
            if k in v2_entries_str and not isinstance(v, str):
                error = True
            if k in v2_entries_list and not isinstance(v, list):
                error = True
            if error:
                text = ('Error while reading old config of the add-on "editor: apply '
                        'font color, background color custom class, custom style". '
                        '\n\n Illegal value "%s" detected in option %s config. Ignoring old config.'
                        % (str(v), str(k))
                        )
                showInfo(text)
                return
            error = False
            for e in mjconfig['v2']:
                if not isinstance(e, dict):
                    text = ('Error while reading old config of the add-on "editor: apply '
                            'font color, background color custom class, custom style". '
                            '\n\n In "v2" there is an entry that is not a dictionary. '
                            'Ignoring old config.'
                            )
                    showInfo(text)
                    return
                for k, v in e.items():
                    if k not in v2_contents_all:
                        error = (k, "")
                    if k in v2_contents_str and not isinstance(v, str):
                        error = (k, v)
                    if k in v2_contents_bool and not isinstance(v, bool):
                        error = (k, v)
                if error:
                    text = ('Error while reading old config of the add-on "editor: apply '
                            'font color, background color custom class, custom style". '
                            '\n\n Illegal value "%s", "%s" detected in option "v2" config.'
                            'Ignoring old config.'
                            % (str(error[0]), str(error[1]))
                            )
                    showInfo(text)
                    return
        showInfo(updatetext_201908)
        config = mjconfig
        v2 = config['v2']
        # adjust old config
        for i, e in enumerate(v2):
            e["Hotkey"] = e["Hotkey"].lower()
            # convert colors
            if e["Category"] in ["Forecolor (inline)", "backcolor"]:
                for k, v in html4colors.items():
                    if k == e["Setting"]:
                        e["Setting"] = v
                for k, v in css3colors.items():
                    if k == e["Setting"]:
                        e["Setting"] = v
            # uppercase forecolor, backcolor so that they are sorted together
            for v, k in e.items():
                if v == "Category" and k == "backcolor":
                    v2[i]["Category"] = "Backcolor (inline)"
                if v == "Category" and k == "Forecolor (inline)":
                    v2[i]["Category"] = "Forecolor (inline)"
        config['v3'] = v2

    return config


def autogenerate_config_values_for_menus(config):
    config['maxname'] = 0
    config['maxshortcut'] = 0
    config['context_menu_groups'] = []
    config['maxname'] = 0
    config['maxshortcut'] = 0
    for e in config['v3']:
        if e['Category'] in uses_classes:
            if not "Target group in menu" in e:
                e["Target group in menu"] = ""
                e["surround_with_div_tag"] = False
        if e['Show_in_menu']:
            if e.get('Text_in_menu', False):
                config['maxname'] = max(config['maxname'], len(e["Text_in_menu"]))
                if e['Category'] == "class (other)" and e["Target group in menu"]:
                    thisgroup = e["Target group in menu"]
                elif e['Category'] == "text wrapper" and e["Target group in menu"]:
                    thisgroup = e["Target group in menu"]
                else:
                    thisgroup = e['Category']
                if thisgroup not in config['context_menu_groups']:
                    config['context_menu_groups'].append(thisgroup)
            if e.get('Hotkey', False):
                config['maxshortcut'] = max(config['maxshortcut'], len(e["Hotkey"]))
    return config


def uses_most_recent_config(config, level):
    if not "update_level" in config:
        return False
    current = config["update_level"]
    try:
        current = int(current)
    except:
        return False
    else:
        if current > level:
            return True
        else:
            return False


def update_config_for_202005(config):
    if "v3" not in config:
        # something's broken in the config??
        # just rest it?
        config['v3'] = defaultconfig.copy()['v3']
    for e in config['v3']:
        if not "Text_in_menu_styling" in e:
            e["Text_in_menu_styling"] = ""
        if not "Text_in_menu_styling_nightmode" in e:
            e["Text_in_menu_styling_nightmode"] = ""
    if not "v3_inactive" in config:
        config["v3_inactive"] = []
    first_after_update_install = False
    if not uses_most_recent_config(config, 1589114109):
        first_after_update_install = True
        if not "v2_key_styling_undo" in config:
            config["v2_key_styling_undo"] = ""
        oldv3 = config['v3'][:]
        config['v3'] = []
        for row in oldv3:
            if row["Category"] in ["class", "class (other)"] and "surround_with_div_tag" not in row:
                row["surround_with_div_tag"] = False
            if row["Category"] == "class":
                row["Category"] = "class (other)"
            if row["Category"] == "style":
                row["Category"] = "style (inline)"
            if row["Category"] == "Forecolor":
                row["Category"] = "Forecolor (inline)"
            config['v3'].append(row)
        config["update_level"] = 1589114110
    return first_after_update_install, config
